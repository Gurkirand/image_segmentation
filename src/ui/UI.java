package ui;
//package ui;

import java.io.File;
import java.util.ArrayList;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import util.*;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.*;
import java.awt.event.*;
/**
 *
 * @author Joohong Ahn, Willie, Gurkiran
 */

class ImageLabel extends javax.swing.JLabel {
	public Image _myimage;
	public int _imageW, _imageH;

	public ImageLabel(String text){
		super(text);
	}

	public void setIcon(BufferedImage img)
	{
		_imageW = img.getWidth();
		_imageH = img.getHeight();
		setIcon(new ImageIcon(img));
	}

	public Dimension getImageSize()
	{
		return new Dimension(_imageW, _imageH);
	}

	public Dimension getAdjustedImageSize()
	{
		int w, h;
		if (_imageW > _imageH)
		{
			w = this.getWidth();
			h = (int) (((1.0 * _imageH) / _imageW) * w);
		}
		else
		{
			h = this.getHeight();
			w = (int) (((1.0 * _imageW) / _imageH) * h);
		}
		return new Dimension(w, h);
	}

	public void setIcon(javax.swing.Icon icon) {
		super.setIcon(icon);
		if (icon instanceof ImageIcon)
		{
			_myimage = ((ImageIcon) icon).getImage();
		}
	}

	@Override
	public void paint(Graphics g){
		Dimension s = getAdjustedImageSize();
		int w = s.width,
		    h = s.height;

		g.drawImage(_myimage, 0, 0, w, h, null);
	}
}

class MarkerLabel extends javax.swing.JLabel{
	public Point source;
	public ArrayList<Point> sinks;

	public MarkerLabel(String text){
		super(text);
		sinks = new ArrayList<>();
	}

	public void clear()
	{
		sinks.clear();
		source = null;
	}

	public void setSource(int x, int y)
	{
		source = new Point(x, y);
		repaint();
	}

	public void addSink(int x, int y)
	{
		sinks.add(new Point(x, y));
		repaint();
	}

	public void removeSource()
	{
		source = null;
		repaint();
	}

	public void removeSink(int x, int y)
	{
		sinks.remove(new Point(x, y));
		repaint();
	}

	public Point removeClosestSink(int x, int y)
	{
		if (sinks.isEmpty())
		{
			return null;
		}
		double dist = 1000,
		       _dist;
		Point sink = null;
		for (Point p: sinks)
		{
			_dist = p.distance(x, y);
			if (_dist < dist)
			{
				dist = _dist;
				sink = p;
			}
		}
		sinks.remove(sink);
		repaint();
		return sink;
	}

	@Override
	public void paint(Graphics g){
		if (source != null)
		{
			g.setColor(Color.red);
			g.fillOval(source.x - 5, source.y - 5, 10, 10);
		}
		g.setColor(Color.blue);
		for (Point p: sinks)
		{
			g.fillOval(p.x - 5, p.y - 5, 10, 10);
		}
	}
}

public class UI extends javax.swing.JFrame {

	private ImageLabel input;
	private MarkerLabel inputMarker;
	private ImageLabel output;
	private javax.swing.JLayeredPane io;
	private javax.swing.JButton imageButton;
	private javax.swing.JButton sourceButton;
	private javax.swing.JButton sinkButton;
	private javax.swing.JButton segmentButton;
	private javax.swing.JButton loadGraphButton;
	private javax.swing.JButton saveGraphButton;
	private javax.swing.JButton saveSegmentButton;
	private javax.swing.JButton hideOutputButton;
	private javax.swing.JButton undoButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JPanel jPanel2;
	private JButton displayButton;
	JLabel hideOutput;

	private LinkedStack<Pair<Point, String>> actions = new LinkedStack<>();

	boolean editSource = true;
	boolean image_segmentation = false;
	private Point source;
	private ArrayList<Point> sinks = new ArrayList<>();
	File file;
	UIListener listener;

	private class MyDispatcher implements KeyEventDispatcher {
        @Override
        public boolean dispatchKeyEvent(KeyEvent e) {
            if (e.getID() == KeyEvent.KEY_PRESSED) {
				 if ((e.getKeyCode() == KeyEvent.VK_Z) && ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0))
				 {
					 undo();
				 }
            } else if (e.getID() == KeyEvent.KEY_RELEASED) {
            } else if (e.getID() == KeyEvent.KEY_TYPED) {
	            
            }
            return false;
        }
    }

	public UI() {

		initComponents();
	}

	public UI(UIListener l) {
		this();
		listener = l;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents()
	{
		int h = 600,
		    w = 600;
		setSize(new Dimension(w, h));
		jMenu1 = new javax.swing.JMenu();
		jMenu2 = new javax.swing.JMenu();
		jPanel2 = new javax.swing.JPanel();
		jPanel2.setPreferredSize(new Dimension(w, h));

		io = new javax.swing.JLayeredPane();
		io.setSize(new Dimension(w, h));
		io.setPreferredSize(new Dimension(w, h));
		input = new ImageLabel("");
		input.setSize(new Dimension(w, h));
		input.setPreferredSize(new Dimension(w, h));
		inputMarker = new MarkerLabel("");
		inputMarker.setSize(new Dimension(w, h));
		inputMarker.setPreferredSize(new Dimension(w, h));
		output = new ImageLabel("");
		output.setSize(new Dimension(w, h));
		output.setPreferredSize(new Dimension(w, h));
		output.setVisible(false);
		io.add(output, 0);
		io.add(inputMarker, 1);
		io.add(input, 2);

		jLabel1 = new javax.swing.JLabel();
		imageButton = new javax.swing.JButton();
		sourceButton = new javax.swing.JButton();
		sinkButton = new javax.swing.JButton();
		segmentButton = new javax.swing.JButton();
		loadGraphButton = new javax.swing.JButton();
		saveGraphButton = new javax.swing.JButton();
		saveSegmentButton = new javax.swing.JButton();
		hideOutputButton = new javax.swing.JButton();
		undoButton = new javax.swing.JButton();
		 displayButton=new javax.swing.JButton();
		 hideOutput=new javax.swing.JLabel();

		jMenu1.setText("jMenu1");

		jMenu2.setText("jMenu2");

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		input.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				imageMouseClicked(evt);
			}
		});

		imageButton.setText("select image");
		imageButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				imageButtonActionPerformed(evt);
			}
		});

		sourceButton.setText("edit source");
		sourceButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				sourceButtonActionPerformed(evt);
			}
		});

		sinkButton.setText("edit sink");
		sinkButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				sinkButtonActionPerformed(evt);
			}
		});

		loadGraphButton.setText("load graph");
		loadGraphButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				loadGraphButtonActionPerformed(evt);
			}
		});
		saveGraphButton.setText("save graph");
		saveGraphButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveGraphButtonActionPerformed(evt);
			}
		});

		segmentButton.setText("run segmentation");
		segmentButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				segmentButtonActionPerformed(evt);
			}
		});

		saveSegmentButton.setText("save segmentation");
		saveSegmentButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveSegmentButtonActionPerformed(evt);
			}
		});

		// hideOutput.setText("hide output");
		// displayButton.addActionListener(new java.awt.event.ActionListener() {
		//     public void actionPerformed(java.awt.event.ActionEvent evt) {
		//         hideOutputButtonActionPerformed(evt);
		//     }
		// });


		// displayButton.setText("show graph");
		// displayButton.addActionListener(new java.awt.event.ActionListener() {
		//     public void actionPerformed(java.awt.event.ActionEvent evt) {
		//         displayButtonActionPerformed(evt);
		//     }
		// });

		// undoButton.setText("show graph");
		// undoButton.addActionListener(new java.awt.event.ActionListener() {
		//     public void actionPerformed(java.awt.event.ActionEvent evt) {
		//         undoButtonActionPerformed(evt);
		//     }
		// });

		// jLabel1.setText("Tap on the image to select source and sink. First tap will select the source and second tap will select sink.");
		jLabel1.setText("Editing source. Click to add / change source.");

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel2Layout.createSequentialGroup()
							.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addContainerGap())
						.addGroup(jPanel2Layout.createSequentialGroup()
							.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
								.addComponent(io, io.getPreferredSize().width, io.getPreferredSize().width, Short.MAX_VALUE)
								.addGroup(jPanel2Layout.createSequentialGroup()
									.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(imageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
										.addComponent(sinkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
									.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
									.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(loadGraphButton, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
										.addComponent(saveGraphButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
									.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
									.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addGroup(jPanel2Layout.createSequentialGroup()
											.addComponent(segmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
											.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
											.addComponent(saveSegmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
											.addComponent(displayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
											.addComponent(hideOutputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
											.addComponent(undoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
											
												)
										.addComponent(sourceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
							.addGap(96, 96, 96))))
							);
		jPanel2Layout.setVerticalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
					.addGap(10, 10, 10)
					.addComponent(jLabel1)
					.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
					.addComponent(io, io.getPreferredSize().height, io.getPreferredSize().height, Short.MAX_VALUE)
					.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
					.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel2Layout.createSequentialGroup()
							.addComponent(imageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
							.addGap(0, 0, Short.MAX_VALUE))
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
							.addGap(0, 0, Short.MAX_VALUE)
							.addComponent(loadGraphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(sourceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
					.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
					.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(saveSegmentButton, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
						.addComponent(sinkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(saveGraphButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(segmentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(displayButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(hideOutputButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(undoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						
							)
						
					.addContainerGap())
					);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);

		pack();

        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new MyDispatcher());
	}// </editor-fold>                        

	private void imageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
		output.setVisible(false);
		output.repaint();
		inputMarker.clear();
		JFileChooser fc = new JFileChooser();
		File workingDirectory = new File(System.getProperty("user.dir"));
		fc.setCurrentDirectory(workingDirectory);
		int result = fc.showOpenDialog(null);
		if (result == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			try {
				BufferedImage i = ImageIO.read(file);
				listener.setImage(i, file.getName());
				input.setIcon(i);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}                                        

	public void setImage(BufferedImage i)
	{
		input.setIcon(i);
	}

	private void imageMouseClicked(java.awt.event.MouseEvent evt) {                                   
		int x=evt.getX();
		int y=evt.getY();
		Dimension s = input.getAdjustedImageSize();
		if (x > s.width || y > s.height)
		{
			return;
		}
		if(editSource){
			setSource(x, y);
		}
		else
		{
			if (SwingUtilities.isLeftMouseButton(evt))
			{
				addSink(x, y);
			}
			else
			{
				removeSink(x, y);
			}
		}
	}

	private void setSource(Point s)
	{
		Point _source = source;
		source = s;
		inputMarker.source = s;
		actions.push(new Pair<>(_source, "SOURCE ADD"));
	}

	private void setSource(int x, int y)
	{
		Point _source = source;
		source = new Point(x, y);
		inputMarker.setSource(x, y);
		actions.push(new Pair<>(_source, "SOURCE ADD"));
	}

	private void addSink(int x, int y)
	{
		Point sink = new Point(x, y);
		sinks.add(sink);
		inputMarker.addSink(x, y);
		actions.push(new Pair<>(sink, "SINK ADD"));
	}

	private void removeSink(int x, int y)
	{
		Point sink = inputMarker.removeClosestSink(x, y);
		sinks.remove(sink);
		actions.push(new Pair<>(sink, "SINK REM"));
	}

	private void sourceButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
		// source=0;
		editSource = true;
		jLabel1.setText("Editing source. Click to add / change source.");

	}                                        

	private void sinkButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
		editSource = false;
		jLabel1.setText("Editing sinks. Left click to add a source, and right click to remove one.");

	}                                        

	private void segmentButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
		JOptionPane.showOptionDialog(null, "image segmentation started","Empty?", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);   
		image_segmentation = true;
		if (listener != null)
		{
			listener.segment(getSource(), getSinks());
		}
	}                                        

	private void loadGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {		
		output.setVisible(false);
		input.repaint();
		output.repaint();
		inputMarker.clear();
		JFileChooser fc = new JFileChooser();
		File workingDirectory = new File(System.getProperty("user.dir"));
		fc.setCurrentDirectory(workingDirectory);
		int result = fc.showOpenDialog(null);
		if (result == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			listener.loadGraph(file);
		}
		JOptionPane.showOptionDialog(null, "Loading graph", "Message", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);
	}                                        

	private void saveGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser fc = new JFileChooser();
		File workingDirectory = new File(System.getProperty("user.dir"));
		fc.setCurrentDirectory(workingDirectory);
		int result = fc.showOpenDialog(null);
		if (result == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			listener.saveGraph(file);
		}
		JOptionPane.showOptionDialog(null, "Graph saved to file", "Message", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);
	}                                        

	private void saveSegmentButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
		// TODO add your handling code here:
		listener.saveSegment();
	}                                        

	private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
		// listener.segment(file);
		// graphcut.setImageFile(file);
		// graph = graphcut.printGraph();
		// String ob[] = {graph};
		// DisplayGraph.main(ob);
		// // System.out.println(graphcut.printGraph());
		if (file != null) {
			String graph[] = {listener.displayGraph()};
			DisplayGraph.main(graph);
			// System.out.println(graph);
		} else {
			JOptionPane.showOptionDialog(null, "Please select an image first", "Message", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);
		}
	}


	public Point getSource()
	{
		Dimension trueSize = input.getImageSize();
		Dimension adjSize = input.getAdjustedImageSize();
		double rw = trueSize.width / (1.0 * adjSize.width);
		double rh = trueSize.height / (1.0 * adjSize.height);
		return new Point((int) (source.x * rw), (int) (source.y * rh));
	}

	public Point[] getSinks()
	{
		Point[] sinksCopy = new Point[inputMarker.sinks.size()]; // allow for source ttoo
		Dimension trueSize = input.getImageSize();
		Dimension adjSize = input.getAdjustedImageSize();
		double rw = trueSize.width / (1.0 * adjSize.width);
		double rh = trueSize.height / (1.0 * adjSize.height);
		Point p;
		for (int i = 0; i < sinksCopy.length; i++)
		{
			p = inputMarker.sinks.get(i);
			sinksCopy[i] = new Point((int) (p.x * rw), (int) (p.y * rh));
		}
		return sinksCopy;
	}

	public void displaySegmented(BufferedImage i)
	{
		output.setVisible(true);
		output.setIcon(i);
	}

	public void hideOutputButtonActionPerformer(java.awt.event.ActionEvent evt)
	{
		output.setVisible(false);
	}

	private void undo()
	{
		if (actions.isEmpty())
			return;
		Pair<Point, String> action = actions.pop();
		String[] flags = action.second.split(" ");
		if (flags[0].equals("SOURCE") && flags[1].equals("ADD"))
		{
			setSource(action.first);
		}
		else if (flags[0].equals("SINK"))
		{
			if (flags[1].equals("ADD"))
			{
				removeSink(action.first.x, action.first.y);
			}
			else if (flags[1].equals("REM"))
			{
				addSink(action.first.x, action.first.y);
			}
		}
		actions.pop();
		inputMarker.repaint();
	}

	public void run() {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				setVisible(true);
			}
		});
	}

	/**
	 * @param args the command line arguments
	 */
	//RENAME RUN? 
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new UI().setVisible(true);
			}
		});
	}
}



